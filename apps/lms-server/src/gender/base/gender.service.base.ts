/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Gender as PrismaGender,
  Student as PrismaStudent,
} from "@prisma/client";

export class GenderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GenderCountArgs, "select">): Promise<number> {
    return this.prisma.gender.count(args);
  }

  async genders(args: Prisma.GenderFindManyArgs): Promise<PrismaGender[]> {
    return this.prisma.gender.findMany(args);
  }
  async gender(
    args: Prisma.GenderFindUniqueArgs
  ): Promise<PrismaGender | null> {
    return this.prisma.gender.findUnique(args);
  }
  async createGender(args: Prisma.GenderCreateArgs): Promise<PrismaGender> {
    return this.prisma.gender.create(args);
  }
  async updateGender(args: Prisma.GenderUpdateArgs): Promise<PrismaGender> {
    return this.prisma.gender.update(args);
  }
  async deleteGender(args: Prisma.GenderDeleteArgs): Promise<PrismaGender> {
    return this.prisma.gender.delete(args);
  }

  async findStudents(
    parentId: string,
    args: Prisma.StudentFindManyArgs
  ): Promise<PrismaStudent[]> {
    return this.prisma.gender
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .students(args);
  }
}
